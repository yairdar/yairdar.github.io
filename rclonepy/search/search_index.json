{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rclonepy - python client for rclone tool Available Plagins Some Note Hello Bonuses","title":"Rclonepy - python client for rclone tool"},{"location":"#rclonepy-python-client-for-rclone-tool","text":"","title":"Rclonepy - python client for rclone tool"},{"location":"#available-plagins","text":"Some Note Hello","title":"Available Plagins"},{"location":"#bonuses","text":"","title":"Bonuses"},{"location":"Taskfile/","text":"Run tests with task test currently bonded env","title":"Taskfile"},{"location":"articles/","text":"Artciles Reducing Complexity with Pydantic & Singledispatch https://www.gidware.com/reducing-complexity-with-pydantic-singledispatch/ Base Settings with Literal from typing import Union from pydantic import BaseSettings, parse_obj_as from typing_extensions import Literal class LocalContext(BaseSettings): env: Literal[\"local\"] # 1 mongo_url: str class ProdContext(BaseSettings): env: Literal[\"prod\"] # 1 mongo_url: str mongo_replicaset: str # 2 Context = Union[LocalContext, ProdContext] # 3 context = parse_obj_as(Context, {}) # 4 singledispatch from functools import singledispatch @singledispatch # 1 def to_json(inp): # 1 \"\"\"implementations in dispatched functions\"\"\" @to_json.register # 2 def as_json_str(input_str: str) -> str: # 2 return f'\"{input_str}\"' # 4 @to_json.register # 3 def as_json_str(inputs: list) -> str: # 3 json_inputs = \", \".join(to_json(single_input) for single_input in inputs) # 4 return f\"[{json_inputs}]\" # 4 def test_to_json(): assert to_json(\"Hello world\") == '\"Hello world\"' # 5 assert to_json([\"a\", \"l\", \"i\", \"c\", \"e\"]) == '[\"a\", \"l\", \"i\", \"c\", \"e\"]' # 6 Magic import os from typing import Union from pymongo import MongoClient, ReadPreference import pytest from functools import singledispatch from pydantic import BaseSettings, parse_obj_as from typing_extensions import Literal class LocalContext(BaseSettings): env: Literal[\"local\"] # 1 mongo_url: str class ProdContext(BaseSettings): env: Literal[\"prod\"] # 1 mongo_url: str mongo_replicaset: str # 1 Context = Union[LocalContext, ProdContext] @singledispatch # 2 def read_env(context: Context) -> MongoClient: \"\"\"implementations in dispatched functions\"\"\" @read_env.register # 3 def create_local_mongo(context: LocalContext) -> MongoClient: print(\"Creating local MongoClient\") return MongoClient(context.mongo_url) # 4 @read_env.register # 3 def create_prod_mongo(context: ProdContext) -> MongoClient: print(\"Creating production MongoClient\") return MongoClient( context.mongo_url, replicaSet=context.mongo_replicaset, read_preference=ReadPreference.NEAREST, ) # 4 def test_reads_local_context(): os.environ.clear() os.environ[\"ENV\"] = \"local\" os.environ[\"MONGO_URL\"] = \"mongodb://madeup_name:madeup_pass@localhost:27017\" context = parse_obj_as(Context, {}) # 5 client = read_env(context) # 5 assert client.address == (\"localhost\", 27017) # 6 def test_reads_prod_context(): os.environ.clear() mongo_url = ( \"mongodb://madeup_name:madeup_pass@mongodb0.example.com:27017/?authSource=admin\" ) os.environ[\"ENV\"] = \"prod\" os.environ[\"MONGO_URL\"] = mongo_url os.environ[\"MONGO_REPLICASET\"] = \"put-your-real-replicaset-here\" context = parse_obj_as(Context, {}) # 5 client = read_env(context) # 5 assert client.address == (\"mongodb0.example.com\", 27017) # 6","title":"Artciles"},{"location":"articles/#artciles","text":"","title":"Artciles"},{"location":"articles/#reducing-complexity-with-pydantic-singledispatch","text":"https://www.gidware.com/reducing-complexity-with-pydantic-singledispatch/","title":"Reducing Complexity with Pydantic &amp; Singledispatch"},{"location":"articles/#base-settings-with-literal","text":"from typing import Union from pydantic import BaseSettings, parse_obj_as from typing_extensions import Literal class LocalContext(BaseSettings): env: Literal[\"local\"] # 1 mongo_url: str class ProdContext(BaseSettings): env: Literal[\"prod\"] # 1 mongo_url: str mongo_replicaset: str # 2 Context = Union[LocalContext, ProdContext] # 3 context = parse_obj_as(Context, {}) # 4","title":"Base Settings with Literal"},{"location":"articles/#singledispatch","text":"from functools import singledispatch @singledispatch # 1 def to_json(inp): # 1 \"\"\"implementations in dispatched functions\"\"\" @to_json.register # 2 def as_json_str(input_str: str) -> str: # 2 return f'\"{input_str}\"' # 4 @to_json.register # 3 def as_json_str(inputs: list) -> str: # 3 json_inputs = \", \".join(to_json(single_input) for single_input in inputs) # 4 return f\"[{json_inputs}]\" # 4 def test_to_json(): assert to_json(\"Hello world\") == '\"Hello world\"' # 5 assert to_json([\"a\", \"l\", \"i\", \"c\", \"e\"]) == '[\"a\", \"l\", \"i\", \"c\", \"e\"]' # 6","title":"singledispatch"},{"location":"articles/#magic","text":"import os from typing import Union from pymongo import MongoClient, ReadPreference import pytest from functools import singledispatch from pydantic import BaseSettings, parse_obj_as from typing_extensions import Literal class LocalContext(BaseSettings): env: Literal[\"local\"] # 1 mongo_url: str class ProdContext(BaseSettings): env: Literal[\"prod\"] # 1 mongo_url: str mongo_replicaset: str # 1 Context = Union[LocalContext, ProdContext] @singledispatch # 2 def read_env(context: Context) -> MongoClient: \"\"\"implementations in dispatched functions\"\"\" @read_env.register # 3 def create_local_mongo(context: LocalContext) -> MongoClient: print(\"Creating local MongoClient\") return MongoClient(context.mongo_url) # 4 @read_env.register # 3 def create_prod_mongo(context: ProdContext) -> MongoClient: print(\"Creating production MongoClient\") return MongoClient( context.mongo_url, replicaSet=context.mongo_replicaset, read_preference=ReadPreference.NEAREST, ) # 4 def test_reads_local_context(): os.environ.clear() os.environ[\"ENV\"] = \"local\" os.environ[\"MONGO_URL\"] = \"mongodb://madeup_name:madeup_pass@localhost:27017\" context = parse_obj_as(Context, {}) # 5 client = read_env(context) # 5 assert client.address == (\"localhost\", 27017) # 6 def test_reads_prod_context(): os.environ.clear() mongo_url = ( \"mongodb://madeup_name:madeup_pass@mongodb0.example.com:27017/?authSource=admin\" ) os.environ[\"ENV\"] = \"prod\" os.environ[\"MONGO_URL\"] = mongo_url os.environ[\"MONGO_REPLICASET\"] = \"put-your-real-replicaset-here\" context = parse_obj_as(Context, {}) # 5 client = read_env(context) # 5 assert client.address == (\"mongodb0.example.com\", 27017) # 6","title":"Magic"},{"location":"rclonepy/cmds/rclone.commands.help.seed/","text":"Rclone Commands Adoption Status Supported Commands cmd description cat Concatenates any files and sends them to stdout. copy Copy files from source to dest, skipping already copied. copyto Copy files from source to dest, skipping already copied. lsjson List directories and objects in the path in JSON format. tree List the contents of the remote in a tree like fashion. size Prints the total size and number of objects in remote:path. Next Commands cmd description copyurl Copy url content to dest. ls List the objects in the path with size and path. lsd List all directories/containers/buckets in the path. lsf List directories and objects in remote:path formatted for parsing. lsl List the objects in path with modification time, size and path. rcat Copies standard input to file on remote. md5sum Produces an md5sum file for all the objects in the path. sha1sum Produces an sha1sum file for all the objects in the path. hashsum Produces a hashsum file for all the objects in the path. mkdir Make the path if it doesn't already exist. move Move files from source to dest. moveto Move file or directory from source to dest. purge Remove the path and all of its contents. version Show the version number. sync Make source and dest identical, modifying destination only. Recheck cmd description genautocomplete Output completion script for a given shell. check Checks the files in the source and destination match. cleanup Clean up the remote if possible. config Enter an interactive configuration session. gendocs Output markdown docs for rclone to the directory supplied. listremotes List all the remotes in the config file. Defered Commands cmd description cryptcheck Cryptcheck checks the integrity of a crypted remote. cryptdecode Cryptdecode returns unencrypted file names. dedupe Interactively find duplicate filenames and delete/rename them. delete Remove the files in path. deletefile Remove a single file from remote. help Show help for rclone commands, flags and backends. link Generate public link to file/folder. mount Mount the remote as file system on a mountpoint. obscure Obscure password for use in the rclone config file. rcd Run rclone listening to remote control commands only. rmdir Remove the empty directory at path. rmdirs Remove empty directories under the path. settier Changes storage class/tier of objects in remote. test Run a test command touch Create new file or change file modification time. Unsopported Commands cmd description about Get quota information from the remote. authorize Remote authorization. backend Run a backend specific command. selfupdate Update the rclone binary. rc Run a command against a running rclone. serve Serve a remote over a protocol. ncdu Explore a remote with a text based user interface.","title":"Rclone Commands Adoption Status"},{"location":"rclonepy/cmds/rclone.commands.help.seed/#rclone-commands-adoption-status","text":"","title":"Rclone Commands Adoption Status"},{"location":"rclonepy/cmds/rclone.commands.help.seed/#supported-commands","text":"cmd description cat Concatenates any files and sends them to stdout. copy Copy files from source to dest, skipping already copied. copyto Copy files from source to dest, skipping already copied. lsjson List directories and objects in the path in JSON format. tree List the contents of the remote in a tree like fashion. size Prints the total size and number of objects in remote:path.","title":"Supported Commands"},{"location":"rclonepy/cmds/rclone.commands.help.seed/#next-commands","text":"cmd description copyurl Copy url content to dest. ls List the objects in the path with size and path. lsd List all directories/containers/buckets in the path. lsf List directories and objects in remote:path formatted for parsing. lsl List the objects in path with modification time, size and path. rcat Copies standard input to file on remote. md5sum Produces an md5sum file for all the objects in the path. sha1sum Produces an sha1sum file for all the objects in the path. hashsum Produces a hashsum file for all the objects in the path. mkdir Make the path if it doesn't already exist. move Move files from source to dest. moveto Move file or directory from source to dest. purge Remove the path and all of its contents. version Show the version number. sync Make source and dest identical, modifying destination only.","title":"Next Commands"},{"location":"rclonepy/cmds/rclone.commands.help.seed/#recheck","text":"cmd description genautocomplete Output completion script for a given shell. check Checks the files in the source and destination match. cleanup Clean up the remote if possible. config Enter an interactive configuration session. gendocs Output markdown docs for rclone to the directory supplied. listremotes List all the remotes in the config file.","title":"Recheck"},{"location":"rclonepy/cmds/rclone.commands.help.seed/#defered-commands","text":"cmd description cryptcheck Cryptcheck checks the integrity of a crypted remote. cryptdecode Cryptdecode returns unencrypted file names. dedupe Interactively find duplicate filenames and delete/rename them. delete Remove the files in path. deletefile Remove a single file from remote. help Show help for rclone commands, flags and backends. link Generate public link to file/folder. mount Mount the remote as file system on a mountpoint. obscure Obscure password for use in the rclone config file. rcd Run rclone listening to remote control commands only. rmdir Remove the empty directory at path. rmdirs Remove empty directories under the path. settier Changes storage class/tier of objects in remote. test Run a test command touch Create new file or change file modification time.","title":"Defered Commands"},{"location":"rclonepy/cmds/rclone.commands.help.seed/#unsopported-commands","text":"cmd description about Get quota information from the remote. authorize Remote authorization. backend Run a backend specific command. selfupdate Update the rclone binary. rc Run a command against a running rclone. serve Serve a remote over a protocol. ncdu Explore a remote with a text based user interface.","title":"Unsopported Commands"}]}